# These are R scripts

install.packages("deSolve")

library(deSolve)
dev.off()

# Model inputs

Initial_values = c(S=999999, I=1, R=0, Total=1)
parameters = c(beta=0.3, sigma=0.1)

# time
time1=seq(from=1, to=200, by=1)

# model equation-classical SIR ####

sir_model_classical <-function(time1,state,parameters){
  with(as.list(c(state,parameters)),{
  N=S+I+R
  F_conventional = beta*(I/N)
  dS = -F_conventional*S
  dI = F_conventional*S - sigma*I
  dR = sigma*I
  dTotal = F_conventional*S 
  
  return(list(c(dS,dI,dR,dTotal)))
  }
  )
}

#solving the equations
SIR_model_classical = as.data.frame(ode(y = Initial_values,
                                     func = sir_model_classical,
                                    parms = parameters,
                                    times = time1)) 

# plot output Classical SIR model
N=1000000
SIR_model_classical$S = 100*SIR_model_classical$S/N
SIR_model_classical$I = 100*SIR_model_classical$I/N
SIR_model_classical$R = 100*SIR_model_classical$R/N
SIR_model_classical$Total = 100*SIR_model_classical$Total/N

print(SIR_model_classical[86,])
print(SIR_model_classical[200,])

plot(SIR_model_classical$time,
     SIR_model_classical$S,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t")
lines(SIR_model_classical$I, col="red")
lines(SIR_model_classical$R, col="green")
lines(SIR_model_classical$Total, col="Black")
abline(h=66.7)
title("A) Conventional SIR model", adj=0)
text(x=200, y=10, "S(t)",cex=0.8)
text(x=100, y=20, "I(t)",cex=0.8)
text(x=110, y=80, "R(t)",cex=0.8)
text(x=100, y=100, "Total Infections",cex=0.8)
text(x=200, y=70, "HIT",cex=0.8)


write.csv(SIR_model_classical, file = "4A_Conventional_SIR.csv")
#*******************************************************

# New SIR Model A ####

sir_model_A <-function(time1,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S
    dI = F_A*S - sigma*I
    dR = sigma*I
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dTotal)))
  }
  )
}

#solving the equations
SIR_model_A = as.data.frame(ode(y =Initial_values,
                             func = sir_model_A,
                            parms = parameters,
                            times = time1)) 

# plot output SIR model A
N=1000000
SIR_model_A$S = 100*SIR_model_A$S/N
SIR_model_A$I = 100*SIR_model_A$I/N
SIR_model_A$R = 100*SIR_model_A$R/N
SIR_model_A$Total = 100*SIR_model_A$Total/N

print(SIR_model_A[195,])
print(SIR_model_A[200,])

plot(SIR_model_A$time,
     SIR_model_A$S,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t")
lines(SIR_model_A$I, col="red")
lines(SIR_model_A$R, col="green")
lines(SIR_model_A$Total, col="Black")
abline(h=66.7)
title("B) Model A", adj=0)
text(x=200, y=40, "S(t)",cex=0.8)
text(x=100, y=15, "I(t)",cex=0.8)
text(x=110, y=50, "R(t)",cex=0.8)
text(x=150, y=70, "Total Infections",cex=0.8)
text(x=5, y=70, "HIT",cex=0.8)

write.csv(SIR_model_A, file = "4B_New_SIR_A.csv")
#*****************************************************

# New SIR Model B####

sir_model_B <-function(time1,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S
    dI = F_B*S - sigma*I
    dR = sigma*I
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dTotal)))
  }
  )
}

#solving the equations
SIR_model_B = as.data.frame(ode(y = Initial_values,
                             func = sir_model_B,
                            parms = parameters,
                            times = time1)) 

# plot output SIR model B
N=1000000
SIR_model_B$S = 100*SIR_model_B$S/N
SIR_model_B$I = 100*SIR_model_B$I/N
SIR_model_B$R = 100*SIR_model_B$R/N
SIR_model_B$Total = 100*SIR_model_B$Total/N

print(SIR_model_B[98,])
print(SIR_model_B[200,])

plot(SIR_model_B$time,
     SIR_model_B$S,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t")
lines(SIR_model_B$I, col="red")
lines(SIR_model_B$R, col="green")
lines(SIR_model_B$Total, col="Black")
abline(h=66.7)
title("C) Model B", adj=0)
text(x=200, y=30, "S(t)",cex=0.8)
text(x=90, y=20, "I(t)",cex=0.8)
text(x=100, y=60, "R(t)",cex=0.8)
text(x=150, y=80, "Total Infections",cex=0.8)
text(x=200, y=70, "HIT",cex=0.8)


write.csv(SIR_model_B, file = "4C_New_SIR_B.csv")
#********************************************************

# Conventional SIR model vs Model A ####

SIR_model_A$Diff_S = SIR_model_classical$S - SIR_model_A$S
SIR_model_A$Diff_I = SIR_model_classical$I - SIR_model_A$I
SIR_model_A$Diff_R = SIR_model_classical$R - SIR_model_A$R
SIR_model_A$Diff_Total = SIR_model_classical$Total - SIR_model_A$Total

# plot Conventional SIR model vs Model A
print(SIR_model_A[50,])

plot(SIR_model_A$time,
     SIR_model_A$Diff_S,type = "l", col="blue",
     ylab = "Proportion Difference, %", ylim = c(-30,30),
     xlab = "Arbitrary time, t")
lines(SIR_model_A$Diff_I, col="red")
lines(SIR_model_A$Diff_R, col="green")
lines(SIR_model_A$Diff_Total, col="Black")
abline(h=0)
title('D) Conventional SIR model versus Model A', adj=0)
text(x=60, y=-15, "S(t)",cex=0.8)
text(x=90, y=10, "I(t)",cex=0.8)
text(x=100, y=25, "R(t)",cex=0.8)
text(x=40, y=25, "Total Infections",cex=0.8)


write.csv(SIR_model_A, file = "4D_Conventional_vs_A.csv")
#***********************************************************

# Conventional SIR model vs Model B ####

SIR_model_B$Diff_S = SIR_model_classical$S - SIR_model_B$S
SIR_model_B$Diff_I = SIR_model_classical$I - SIR_model_B$I
SIR_model_B$Diff_R = SIR_model_classical$R - SIR_model_B$R
SIR_model_B$Diff_Total = SIR_model_classical$Total - SIR_model_B$Total

# plot Conventional SIR model vs Model B

plot(SIR_model_B$time,
     SIR_model_B$Diff_S,type = "l", col="blue",
     ylab = "Proportion Difference, %", ylim = c(-30,30),
     xlab = "Arbitrary time, t")
lines(SIR_model_B$Diff_I, col="red")
lines(SIR_model_B$Diff_R, col="green")
lines(SIR_model_B$Diff_Total, col="Black")
abline(h=0)
title("E) Conventional SIR model versus Model B", adj=0)
text(x=60, y=-10, "S(t)",cex=0.8)
text(x=90, y=7, "I(t)",cex=0.8)
text(x=100, y=13, "R(t)",cex=0.8)
text(x=60, y=20, "Total Infections",cex=0.8)


write.csv(SIR_model_B, file = "4E_Conventional_vs_B.csv")
#*********************************************************

# Total infection with varying r0

beta = seq(from=0.11, to=1.0, by=0.01)
r0 = beta/0.1
reproduction = as.data.frame(r0)
reproduction$HIT = 100*(1-(1/reproduction$r0))


# sensitivity analysis with conventional SIR model ####
dat_classical = data.frame()

for(beta in seq(from=0.11, to=1.0, by=0.01)){
  
  Initial_values = c(S=999999, I=1, R=0, Total=1)
  parameters = c(beta, sigma=0.1)
  
  # time
  time=seq(from=1, to=1000, by=1)
  
  # model equation-classical SIR
  
  sir_model_classical <-function(time,state,parameters){
    with(as.list(c(state,parameters)),{
      N=S+I+R
      F_conventional = beta*(I/N)
      dS = -F_conventional*S
      dI = F_conventional*S - sigma*I
      dR = sigma*I
      dTotal = F_conventional*S 
      
      return(list(c(dS,dI,dR,dTotal)))
    }
    )
  }
  
  #solving the equations
  SIR_model_classical = as.data.frame(ode(y = Initial_values,
                                       func = sir_model_classical,
                                      parms = parameters,
                                      times = time)) 
    
   
  classical = (SIR_model_classical[1000,]) 
  dat_classical = rbind(dat_classical, classical)
  print(dat_classical)

}

dat_classical$Total = dat_classical$Total*100/N
plot(reproduction$r0,dat_classical$Total,type = "l",
     ylim = c(0,100),col="blue")
lines(reproduction$r0, reproduction$HIT,type = "b")

# sensitivity analysis with SIR model A ####

dat_A = data.frame()

for(beta in seq(from=0.11, to=1.0, by=0.01)){
  
  Initial_values = c(S=999999, I=1, R=0, Total=1)
  parameters = c(beta, sigma=0.1)
  
  # time
  time=seq(from=1, to=1000, by=1)
  
  # model equation- SIR Model A
  
  sir_model_A <-function(time,state,parameters){
    with(as.list(c(state,parameters)),{
      N=S+I+R
      F_A = beta*(I/N)*(S/N)
      dS = -F_A*S
      dI = F_A*S - sigma*I
      dR = sigma*I
      dTotal = F_A*S 
      
      return(list(c(dS,dI,dR,dTotal)))
    }
    )
  }
  
  #solving the equations
  SIR_model_A = as.data.frame(ode(y = Initial_values,
                               func = sir_model_A,
                              parms = parameters,
                              times = time)) 
  
  
  Model_A = (SIR_model_A[1000,]) 
  dat_A = rbind(dat_A, Model_A)
  print(dat_A)
  
}

dat_A$Total = dat_A$Total*100/N
plot(reproduction$r0,dat_A$Total,type = "l",
     ylim = c(0,100),col="red")
lines(reproduction$r0, reproduction$HIT,type = "b")


# sensitivity analysis with SIR model B ####

dat_B = data.frame()

for(beta in seq(from=0.11, to=1.0, by=0.01)){
  
  Initial_values = c(S=999999, I=1, R=0, Total=1)
  parameters = c(beta, sigma=0.1)
  
  # time
  time=seq(from=1, to=1000, by=1)
  
  # model equation- SIR Model B
  
  sir_model_B <-function(time,state,parameters){
    with(as.list(c(state,parameters)),{
      N=S+I+R
      F_B = beta*(I/N)*((N-R)/N)
      dS = -F_B*S
      dI = F_B*S - sigma*I
      dR = sigma*I
      dTotal = F_B*S 
      
      return(list(c(dS,dI,dR,dTotal)))
    }
    )
  }
  
  #solving the equations
  SIR_model_B = as.data.frame(ode(y = Initial_values,
                               func = sir_model_B,
                              parms = parameters,
                              times = time)) 
  
  
  Model_B = (SIR_model_B[1000,]) 
  dat_B = rbind(dat_B, Model_B)
  print(dat_B)
  
}

dat_B$Total = dat_B$Total*100/N
plot(reproduction$r0,dat_B$Total,type = "l", col="green")
lines(reproduction$r0, reproduction$HIT,type = "b")

# combine all output of classical SIR, Model A and Model B

plot(reproduction$r0,dat_classical$Total,
     type = "l",col="blue",
     ylab = "Proportion of population (%)",ylim = c(0,100),
     xlab = "Basic reproduction number,r0")
lines(reproduction$r0, dat_A$Total,col="green")
lines(reproduction$r0, dat_B$Total,col="red")
lines(reproduction$r0, reproduction$HIT,type = "p")
title ("F) Total infections with varying r0", adj=0)
text(x=2.5, y=100, "Conventional SIR model",cex=0.8)
text(x=2.8, y=82, "Model B",cex=0.8)
text(x=6.0, y=70, "Model A and HIT",cex=0.8)

### export output data 
write.csv(reproduction, file = "4F_Sensitivity_r0.csv")
write.csv(dat_classical, file = "4F_Sensitivity_ClassicalSIR.csv")
write.csv(dat_A, file = "4F_Sensitivity_ModelA.csv")
write.csv(dat_B, file = "4F_Sensitivity_ModelB.csv")

#*********************************************************************
# High vac_classical rate, v=1.0% population per t ####
#*********************************************************************

# Conventional SIR vaccine models #####

Initial_values = c(S=989999, I=1, R=10000, V=10000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=10000)

# time
time2=seq(from=1, to=67, by=1)

# model equation-conventional SIR model ####

vm_classical <-function(time2,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_conventional = beta*(I/N)
    dS = -F_conventional*S - v
    dI = F_conventional*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_conventional*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_classical = as.data.frame(ode(y = Initial_values,
                              func = vm_classical,
                             parms = parameters,
                             times = time2)) 
print(VM_classical[67,])

Initial_values = c(S=327874, I=637, R=671487, V=670000, Total=2125)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time3=seq(from=67, to=500, by=1)

# model equation-conventional SIR model ####

vm2_classical <-function(time3,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_conventional = beta*(I/N)
    dS = -F_conventional*S - v
    dI = F_conventional*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_conventional*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_classical = as.data.frame(ode(y = Initial_values,
                               func = vm2_classical,
                              parms = parameters,
                              times = time3)) 

VMfinal_classical = rbind(VM_classical,VM2_classical)
VMfinal_classical = VMfinal_classical[-68,]
#View(VMfinal_classical)

# plot output Conventional SIR vaccine model
N=1000000
VMfinal_classical$Total = 100*VMfinal_classical$Total/N
VMfinal_classical$S = 100*VMfinal_classical$S/N
VMfinal_classical$I = 100*VMfinal_classical$I/N
VMfinal_classical$R = 100*VMfinal_classical$R/N
VMfinal_classical$V = 100*VMfinal_classical$V/N

print(VMfinal_classical[67,])
print(VMfinal_classical[500,])

plot(VMfinal_classical$time,
     VMfinal_classical$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,2.0),
     xlab = "Arbitrary time, t")
abline(v=67)
title("A) Conventional SIR (v=1.0%)", adj=0)
text(x=85, y=2.0, "HIT was achieved at t=67",cex=0.8, adj=0)

write.csv(VMfinal_classical, file = "5A_Conventional_SIR_VaccineModel_v1.0.csv")
#*******************************************************

# SIR vaccine model A #####

Initial_values = c(S=989999, I=1, R=10000,V=10000,Total=1)
parameters = c(beta=0.3, sigma=0.1, v=10000)

# time
time2=seq(from=1, to=67, by=1)

# model equation-SIR vaccine model A ####

vm_model_A <-function(time2,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S - v
    dI = F_A*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_A = as.data.frame(ode(y = Initial_values,
                      func = vm_model_A,
                     parms = parameters,
                     times = time2)) 
print(VM_A[67,])

Initial_values = c(S=329836, I=15, R=670148, V=670000, Total=163)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time3=seq(from=67, to=500, by=1)

# model equation- SIR vaccine model A ####

vm2_model_A <-function(time3,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S - v
    dI = F_A*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_A = as.data.frame(ode(y = Initial_values,
                       func = vm2_model_A,
                      parms = parameters,
                      times = time3)) 
 
VMfinal_A = rbind(VM_A,VM2_A)
#View(VMfinal_A)
VMfinal_A = VMfinal_A[-68,]

# plot output SIR vaccine model A
N=1000000
VMfinal_A$Total = 100*VMfinal_A$Total/N
VMfinal_A$S = 100*VMfinal_A$S/N
VMfinal_A$I = 100*VMfinal_A$I/N
VMfinal_A$R = 100*VMfinal_A$R/N
VMfinal_A$V = 100*VMfinal_A$V/N

print(VMfinal_A[67,])
print(VMfinal_A[500,])

plot(VMfinal_A$time,
     VMfinal_A$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,0.1),
     xlab = "Arbitrary time, t")
abline(v=67)
title("B) Model A (v=1.0%)", adj=0)
text(x=90, y=0.1, "HIT was achieved at t=67",cex=0.8, adj=0)

write.csv(VMfinal_A, file = "5B_ModelA_VaccineModel_v1.0.csv")
#*******************************************************

# SIR vaccine model B #####

Initial_values = c(S=989999, I=1, R=10000, V=10000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=10000)

# time
time2=seq(from=1, to=67, by=1)

# model equation-SIR vaccine Model B ####

vm_model_B <-function(time2,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S - v
    dI = F_B*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_B = as.data.frame(ode(y = Initial_values,
                      func = vm_model_B,
                     parms = parameters,
                     times = time2)) 
print(VM_B[67,])

Initial_values = c(S=329836, I=15, R=670148, V=670000, Total=163)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time3=seq(from=67, to=500, by=1)

# model equation-SIR vaccine model B ####

vm2_model_B <-function(time3,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S - v
    dI = F_B*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dV, dTotal)))
  }
  )
}

#solving the equations
VM2_B = as.data.frame(ode(y = Initial_values,
                       func = vm2_model_B,
                      parms = parameters,
                      times = time3)) 

VMfinal_B = rbind(VM_B,VM2_B)
#View(VMfinal_B)
VMfinal_B = VMfinal_B[-68,]


# plot output SIR vaccine model B
N=1000000
VMfinal_B$Total = 100*VMfinal_B$Total/N
VMfinal_B$S = 100*VMfinal_B$S/N
VMfinal_B$I = 100*VMfinal_B$I/N
VMfinal_B$R = 100*VMfinal_B$R/N
VMfinal_B$V = 100*VMfinal_B$V/N

print(VMfinal_B[67,])
print(VMfinal_B[500,])


plot(VMfinal_B$time,
     VMfinal_B$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,0.1),
     xlab = "Arbitrary time, t")
abline(v=67)
title("C) Model B (v=1.0%)", adj=0)
text(x=90, y=0.1, "HIT was achieved at t=67",cex=0.8, adj=0)


write.csv(VMfinal_B, file = "5C_ModelB_VaccineModel_v1.0.csv")
#***************************************************************


# Intermediate vac_classical rate, v=0.5% population per t ####
#***************************************************************

# Conventional SIR vaccine model #####

Initial_values = c(S=994999, I=1, R=5000, V=5000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=5000)

# time
time4=seq(from=1, to=100, by=1)

# model equation-conventional SIR vaccine model ####

vm_classical <-function(time4,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_conventional = beta*(I/N)
    dS = -F_conventional*S - v
    dI = F_conventional*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_conventional*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_classical = as.data.frame(ode(y = Initial_values,
                              func = vm_classical,
                             parms = parameters,
                             times = time4)) 
print(VM_classical[100,])

Initial_values = c(S=273300, I=58801, R=667898, V=500000, Total=226699)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time5 = seq(from=100, to=300, by=1)

# model equation-conventioanl SIR vaccine model ####

vm2_classical <-function(time5,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_conventional = beta*(I/N)
    dS = -F_conventional*S - v
    dI = F_conventional*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_conventional*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_classical = as.data.frame(ode(y = Initial_values,
                               func = vm2_classical,
                              parms = parameters,
                              times = time5)) 

VMfinal_classical = rbind(VM_classical,VM2_classical)
#View(VMfinal_classical)
VMfinal_classical = VMfinal_classical[-101,]

# plot output Conventional SIR vaccine model
N=1000000
VMfinal_classical$Total = 100*VMfinal_classical$Total/N
VMfinal_classical$S = 100*VMfinal_classical$S/N
VMfinal_classical$I = 100*VMfinal_classical$I/N
VMfinal_classical$R = 100*VMfinal_classical$R/N
VMfinal_classical$V = 100*VMfinal_classical$V/N

print(VMfinal_classical[100,])
print(VMfinal_classical[300,])

plot(VMfinal_classical$time,
     VMfinal_classical$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,50.0),
     xlab = "Arbitrary time, t")
abline(v=100)
title("D) Conventional SIR (v=0.5%)", adj=0)
text(x=105, y=50, "HIT was achieved at t=100",cex=0.8, adj=0)


write.csv(VMfinal_classical, file = "5D_Conventional_SIR_VaccineModel_v0.5.csv")
#*******************************************************

# SIR vaccine model A #####

Initial_values = c(S=994999, I=1, R=5000, V=5000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=5000)

# time
time6=seq(from=1, to=131, by=1)

# model equation-SIR Model A ####

vm_model_A <-function(time6,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S - v
    dI = F_A*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_A = as.data.frame(ode(y = Initial_values,
                      func = vm_model_A,
                     parms = parameters,
                     times = time6)) 
print(VM_A[131,])

Initial_values = c(S=334825, I=301, R=664872, V=655000, Total=10174)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time7=seq(from=131, to=300, by=1)

# model equation- SIR model A ####

vm2_model_A <-function(time7,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S - v
    dI = F_A*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_A = as.data.frame(ode(y = Initial_values,
                       func = vm2_model_A,
                      parms = parameters,
                      times = time7)) 

VMfinal_A = rbind(VM_A,VM2_A)
#View(VMfinal_A)
VMfinal_A = VMfinal_A[-132,]

# plot output SIR vaccine model A
N=1000000
VMfinal_A$Total = 100*VMfinal_A$Total/N
VMfinal_A$S = 100*VMfinal_A$S/N
VMfinal_A$I = 100*VMfinal_A$I/N
VMfinal_A$R = 100*VMfinal_A$R/N
VMfinal_A$V = 100*VMfinal_A$V/N

print(VMfinal_A[131,])
print(VMfinal_A[300,])

plot(VMfinal_A$time,
     VMfinal_A$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,5),
     xlab = "Arbitrary time, t")
abline(v=131)
title("E) Model A (v=0.5%)", adj=0)
text(x=135, y=5.0, "HIT was achieved at t=131",cex=0.8, adj=0)


write.csv(VMfinal_A, file = "5E_ModelA_VaccineModel_v0.5.csv")
#*******************************************************

# SIR vaccine model B #####

Initial_values = c(S=994999, I=1, R=5000,V=5000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=5000)

# time
time8=seq(from=1, to=131, by=1)

# model equation-SIR vaccine Model B ####

vm_model_B <-function(time8,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S - v
    dI = F_B*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_B = as.data.frame(ode(y = Initial_values,
                      func = vm_model_B,
                     parms = parameters,
                     times = time8)) 
print(VM_B[131,])

Initial_values = c(S=334729, I=306, R=664963, V=655000, Total=10270)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time9=seq(from=131, to=300, by=1)

# model equation-SIR vaccine model B ####

vm2_model_B <-function(time9,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S - v
    dI = F_B*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_B = as.data.frame(ode(y = Initial_values,
                       func = vm2_model_B,
                      parms = parameters,
                      times = time9)) 

VMfinal_B = rbind(VM_B,VM2_B)
#View(VMfinal_B)
VMfinal_B = VMfinal_B[-132,]

# plot output SIR vaccine model B
N=1000000
VMfinal_B$Total = 100*VMfinal_B$Total/N
VMfinal_B$S = 100*VMfinal_B$S/N
VMfinal_B$I = 100*VMfinal_B$I/N
VMfinal_B$R = 100*VMfinal_B$R/N
VMfinal_B$V = 100*VMfinal_B$V/N

print(VMfinal_B[131,])
print(VMfinal_B[300,])

plot(VMfinal_B$time,
     VMfinal_B$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,5.0),
     xlab = "Arbitrary time, t")
abline(v=131)
title("F) Model B (v=0.5%)", adj=0)
text(x=135, y=5.0, "HIT was achieved at t=131",cex=0.8, adj=0)

write.csv(VMfinal_B, file = "5F_ModelB_VaccineModel_v0.5.csv")
#*******************************************************


# Low vaccination rate, v=0.1% population per t ####
#***************************************************************

# Conventional SIR vaccine model #####

Initial_values = c(S=998999, I=1, R=1000, V=1000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=1000)

# time
time10=seq(from=1, to=87, by=1)

# model equation-conventional SIR vaccine model ####

vm_classical <-function(time10,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_conventional = beta*(I/N)
    dS = -F_conventional*S - v
    dI = F_conventional*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_conventional*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_classical = as.data.frame(ode(y = Initial_values,
                              func = vm_classical,
                             parms = parameters,
                             times = time10)) 
print(VM_classical[87,])

Initial_values = c(S=160541, I=188658, R=650799, V=87000, Total=752458)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time11=seq(from=87, to=200, by=1)

# model equation-conventional SIR vaccine model ####

vm2_classical <-function(time11,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_conventional = beta*(I/N)
    dS = -F_conventional*S - v
    dI = F_conventional*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_conventional*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_classical = as.data.frame(ode(y =Initial_values,
                               func = vm2_classical,
                              parms = parameters,
                              times = time11)) 

VMfinal_classical = rbind(VM_classical,VM2_classical)
#View(VMfinal_classical)
VMfinal_classical = VMfinal_classical[-88,]


# plot output Conventional SIR vaccine model
N=1000000
VMfinal_classical$Total = 100*VMfinal_classical$Total/N
VMfinal_classical$S = 100*VMfinal_classical$S/N
VMfinal_classical$I = 100*VMfinal_classical$I/N
VMfinal_classical$R = 100*VMfinal_classical$R/N
VMfinal_classical$V = 100*VMfinal_classical$V/N

print(VMfinal_classical[87,])
print(VMfinal_classical[200,])


plot(VMfinal_classical$time,
     VMfinal_classical$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,100.0),
     xlab = "Arbitrary time, t")
abline(v=87)
title("G) Conventional SIR (v=0.1%)",adj=0)
text(x=90, y=100, "HIT was achieved at t=87",cex=0.8, adj=0)


write.csv(VMfinal_classical, file = "5G_Conventional_SIR_VaccineModel_v0.1.csv")
#*******************************************************

# SIR vaccine model A #####

Initial_values = c(S=998999, I=1, R=1000,V=1000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=1000)

# time
time12=seq(from=1, to=134, by=1)

# model equation-SIR vaccine Model A ####

vm_model_A <-function(time12,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S - v
    dI = F_A*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_A = as.data.frame(ode(y = Initial_values,
                      func = vm_model_A,
                     parms = parameters,
                     times = time12)) 
print(VM_A[134,])

Initial_values = c(S=327223, I=8576, R=664200,V=134000, Total=538777)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time13=seq(from=134, to=200, by=1)

# model equation- SIR vaccine model A ####

vm2_model_A <-function(time13,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_A = beta*(I/N)*(S/N)
    dS = -F_A*S - v
    dI = F_A*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_A*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_A = as.data.frame(ode(y = Initial_values,
                       func = vm2_model_A,
                      parms = parameters,
                      times = time13)) 

VMfinal_A = rbind(VM_A,VM2_A)
#View(VMfinal_A)
VMfinal_A = VMfinal_A[-135,]

# plot output SIR vaccine model A
N=1000000
VMfinal_A$Total = 100*VMfinal_A$Total/N
VMfinal_A$S = 100*VMfinal_A$S/N
VMfinal_A$I = 100*VMfinal_A$I/N
VMfinal_A$R = 100*VMfinal_A$R/N
VMfinal_A$V = 100*VMfinal_A$V/N

print(VMfinal_A[134,])
print(VMfinal_A[200,])

plot(VMfinal_A$time,
     VMfinal_A$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t")
abline(v=134)
title("H) Model A (v=0.1%)", adj=0)
text(x=130, y=100.0, "HIT was achieved at t=134",cex=0.8, adj=1)


write.csv(VMfinal_A, file = "5H_ModelA_VaccineModel_v0.1.csv")
#*******************************************************

# SIR vaccine model B #####

Initial_values = c(S=998999, I=1, R=1000, V=1000, Total=1)
parameters = c(beta=0.3, sigma=0.1, v=1000)

# time
time14=seq(from=1, to=107, by=1)

# model equation-SIR vaccine Model B ####

vm_model_B <-function(time14,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S - v
    dI = F_B*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM_B = as.data.frame(ode(y = Initial_values,
                      func = vm_model_B,
                     parms = parameters,
                     times = time14)) 
print(VM_B[107,])

Initial_values = c(S=289969, I=46758, R=663271, V=107000, Total=603030)
parameters = c(beta=0.3, sigma=0.1, v=0)

# time
time15=seq(from=107, to=200, by=1)

# model equation-SIR vaccine model B ####

vm2_model_B <-function(time15,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R
    F_B = beta*(I/N)*((N-R)/N)
    dS = -F_B*S - v
    dI = F_B*S - sigma*I
    dR = sigma*I + v
    dV = v
    dTotal = F_B*S 
    
    return(list(c(dS,dI,dR,dV,dTotal)))
  }
  )
}

#solving the equations
VM2_B = as.data.frame(ode(y = Initial_values,
                       func = vm2_model_B,
                      parms = parameters,
                      times = time15)) 

VMfinal_B = rbind(VM_B,VM2_B)
#View(VMfinal_B)
VMfinal_B = VMfinal_B[-108,]


# plot output SIR vaccine model B
N=1000000
VMfinal_B$Total = 100*VMfinal_B$Total/N
VMfinal_B$S = 100*VMfinal_B$S/N
VMfinal_B$I = 100*VMfinal_B$I/N
VMfinal_B$R = 100*VMfinal_B$R/N
VMfinal_B$V = 100*VMfinal_B$V/N

print(VMfinal_B[107,])
print(VMfinal_B[200,])

plot(VMfinal_B$time,
     VMfinal_B$Total,type = "l", col="blue",
     ylab = "Proportion, %", ylim = c(0,100.0),
     xlab = "Arbitrary time, t")
abline(v=107)
title("I) Model B (v=0.1%)", adj=0)
text(x=100, y=100.0, "HIT was achieved at t=107",cex=0.8, adj=1)


write.csv(VMfinal_B, file = "5I_ModelB_VaccineModel_v0.1.csv")
#****************************************************************


#**********simulation of other infectious diseases**********####
#****************************************************************

# @@@@@@@@@@@@@@ seasonal influenza in US @@@@@@@@@@@@@@@@@@

# @@@@@@@@@@@@@@ Disclaimers  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# The simulation below does not aim to capture the actual dynamics of seasonal influenza in US.
# It aims to demonstrate differences between the conventional SIR model and newly proposed models.
# Researchers may modify the parameters during the simulation to obtain different projections.
# Therefore, projection may be different from the article due to different parameters used in the simulations.
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# WITH Vaccination #####

# Seasonal Influenza, R0 = 1.3-1.5
# Duration of sickness/contagiousness = 5-7 days, sigma = 0.20 - 0.14
# US total population size N = 309 million in 2010, 295.5 million in 2005
# Net population growth rate 0.5% (0.005) annually: b=0.000013699 per day
# Waning of natural immunity after 6 - 12 months (180 - 365 days) due to changes in circulating influenza viruses from year to year
# immunity duration: Dur = 180 - 365
# vaccine effectiveness 30%-60%: rr = 0.7-0.4
# 40% - 60% (0.5-0.6) vaccine coverage: v=0.0010958-0.0016438
# duration taken to develop full immunity after vaccination 14 days
# 15 years (t=1 to t=5475)

rm(list=ls())
Initial_values = c(S=295000000, I=1, R=0, Itotal=1, V1=0,V2=0)
parameters = c(beta=0.3, sigma=0.2, Dur = 180, Dur2 = 14,
               b=0.000013699, v=0.0010958, rr=0.5)

# time
time=seq(from=1, to=5475, by=1)

# model equation-classical SIR ####

sir_model_classical <-function(time,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R+V1+V2
    F_conventional = beta*(I/N)
    F_V = rr*F_conventional
    w = 1/Dur
    gamma = 1/Dur2
    dS = -F_conventional*S + w*R + b*N +w*V2 - v*N
    dI = F_conventional*S + F_conventional*V1 + F_V*V2 - sigma*I
    dR = sigma*I - w*R
    dItotal = F_conventional*S + F_conventional*V1 + F_V*V2
    dV1 = v*N - F_conventional*V1 - gamma*V1
    dV2 = gamma*V1 - F_V*V2 - w*V2
    
    return(list(c(dS,dI,dR,dItotal,dV1,dV2)))
  }
  )
}

#solving the equations
SIR_model_classical = as.data.frame(ode(y = Initial_values,
                                        func = sir_model_classical,
                                        parms = parameters,
                                        times = time)) 

# plot output Classical SIR model
SIR_model_classical$N = SIR_model_classical$S+
                        SIR_model_classical$I+
                        SIR_model_classical$R+
                        SIR_model_classical$V1+
                        SIR_model_classical$V2
SIR_model_classical$N_per = 100*SIR_model_classical$N/SIR_model_classical$N
SIR_model_classical$S_per = 100*SIR_model_classical$S/SIR_model_classical$N
SIR_model_classical$I_per = 100*SIR_model_classical$I/SIR_model_classical$N
SIR_model_classical$R_per = 100*SIR_model_classical$R/SIR_model_classical$N
SIR_model_classical$V1_per = 100*SIR_model_classical$V1/SIR_model_classical$N
SIR_model_classical$V2_per = 100*SIR_model_classical$V2/SIR_model_classical$N
SIR_model_classical$Itotal_per = 100*SIR_model_classical$Itotal/SIR_model_classical$N

plot(SIR_model_classical$time,
     SIR_model_classical$I_per,type = "l", col="red",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t", xlim=c(0,5000))
lines(SIR_model_classical$time, SIR_model_classical$N_per)
lines(SIR_model_classical$time, SIR_model_classical$V2_per, col="orange")
lines(SIR_model_classical$time, SIR_model_classical$S_per, col="green")
lines(SIR_model_classical$time, SIR_model_classical$R_per, col="blue")
title("A) Conventional SIR", cex=0.8, adj=0)

write.csv(SIR_model_classical, file = "6A_influenza_conventional_SIR.csv")

# calculating disease burden over year - by cases

Y1 = SIR_model_classical$Itotal[365]
Y2 = SIR_model_classical$Itotal[730]
Y3 = SIR_model_classical$Itotal[1095]
Y4 = SIR_model_classical$Itotal[1460]
Y5 = SIR_model_classical$Itotal[1825]
Y6 = SIR_model_classical$Itotal[2190]
Y7 = SIR_model_classical$Itotal[2555]
Y8 = SIR_model_classical$Itotal[2920]
Y9 = SIR_model_classical$Itotal[3285]
Y10 = SIR_model_classical$Itotal[3650]
Y11 = SIR_model_classical$Itotal[4015]
Y12 = SIR_model_classical$Itotal[4380]
Y13 = SIR_model_classical$Itotal[4745]
Y14 = SIR_model_classical$Itotal[5110]

Year1 = SIR_model_classical$Itotal[1:365] 
Year2 = SIR_model_classical$Itotal[366:730]-Y1
Year3 = SIR_model_classical$Itotal[731:1095]-Y2
Year4 = SIR_model_classical$Itotal[1096:1460]-Y3
Year5 = SIR_model_classical$Itotal[1461:1825]-Y4
Year6 = SIR_model_classical$Itotal[1826:2190]-Y5
Year7 = SIR_model_classical$Itotal[2191:2555]-Y6
Year8 = SIR_model_classical$Itotal[2556:2920]-Y7
Year9 = SIR_model_classical$Itotal[2921:3285]-Y8
Year10 = SIR_model_classical$Itotal[3286:3650]-Y9
Year11 = SIR_model_classical$Itotal[3651:4015]-Y10
Year12 = SIR_model_classical$Itotal[4016:4380]-Y11
Year13 = SIR_model_classical$Itotal[4381:4745]-Y12
Year14 = SIR_model_classical$Itotal[4746:5110]-Y13
Year15 = SIR_model_classical$Itotal[5111:5475]-Y14

burden_classicalSIR_V_cases = as.data.frame(cbind(Year1,Year2,Year3,Year4,Year5,Year6,
                                                  Year7,Year8,Year9,Year10,Year11,Year12,Year13,Year14,Year15))

#View(burden_classicalSIR_V_cases)
print(burden_classicalSIR_V_cases[365,])

# calculating disease burden over year - by proportion


P1 = SIR_model_classical$Itotal_per[365]
P2 = SIR_model_classical$Itotal_per[730]
P3 = SIR_model_classical$Itotal_per[1095]
P4 = SIR_model_classical$Itotal_per[1460]
P5 = SIR_model_classical$Itotal_per[1825]
P6 = SIR_model_classical$Itotal_per[2190]
P7 = SIR_model_classical$Itotal_per[2555]
P8 = SIR_model_classical$Itotal_per[2920]
P9 = SIR_model_classical$Itotal_per[3285]
P10 = SIR_model_classical$Itotal_per[3650]
P11 = SIR_model_classical$Itotal_per[4015]
P12 = SIR_model_classical$Itotal_per[4380]
P13 = SIR_model_classical$Itotal_per[4745]
P14 = SIR_model_classical$Itotal_per[5110]

PYear1 = SIR_model_classical$Itotal_per[1:365] 
PYear2 = SIR_model_classical$Itotal_per[366:730]-P1
PYear3 = SIR_model_classical$Itotal_per[731:1095]-P2
PYear4 = SIR_model_classical$Itotal_per[1096:1460]-P3
PYear5 = SIR_model_classical$Itotal_per[1461:1825]-P4
PYear6 = SIR_model_classical$Itotal_per[1826:2190]-P5
PYear7 = SIR_model_classical$Itotal_per[2191:2555]-P6
PYear8 = SIR_model_classical$Itotal_per[2556:2920]-P7
PYear9 = SIR_model_classical$Itotal_per[2921:3285]-P8
PYear10 = SIR_model_classical$Itotal_per[3286:3650]-P9
PYear11 = SIR_model_classical$Itotal_per[3651:4015]-P10
PYear12 = SIR_model_classical$Itotal_per[4016:4380]-P11
PYear13 = SIR_model_classical$Itotal_per[4381:4745]-P12
PYear14 = SIR_model_classical$Itotal_per[4746:5110]-P13
PYear15 = SIR_model_classical$Itotal_per[5111:5475]-P14

burden_classicalSIR_V_per = as.data.frame(cbind(PYear1,PYear2,PYear3,PYear4,
                                                PYear5,PYear6,PYear7,PYear8,
                                                PYear9,PYear10,PYear11,PYear12,
                                                PYear13,PYear14,PYear15))


#View(burden_classicalSIR_V_per)
print(burden_classicalSIR_V_per[365,])

# Model A ####

sir_model_A <-function(time,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R+V1+V2
    F_A = beta*(I/N)*(S/N)
    F_V = rr*F_A
    w = 1/Dur
    gamma = 1/Dur2
    dS = -F_A*S + w*R + b*N +w*V2 - v*N
    dI = F_A*S + F_A*V1 + F_V*V2 - sigma*I
    dR = sigma*I - w*R
    dItotal = F_A*S + F_A*V1 + F_V*V2
    dV1 = v*N - F_A*V1 - gamma*V1
    dV2 = gamma*V1 - F_V*V2 - w*V2
    
    return(list(c(dS,dI,dR,dItotal,dV1,dV2)))
  }
  )
}

#solving the equations
SIR_model_A = as.data.frame(ode(y = Initial_values,
                                func = sir_model_A,
                                parms = parameters,
                                times = time)) 

# plot output SIR model B
SIR_model_A$N = SIR_model_A$S+
                SIR_model_A$I+
                SIR_model_A$R+
                SIR_model_A$V1+
                SIR_model_A$V2
SIR_model_A$N_per = 100*SIR_model_A$N/SIR_model_A$N
SIR_model_A$S_per = 100*SIR_model_A$S/SIR_model_A$N
SIR_model_A$I_per = 100*SIR_model_A$I/SIR_model_A$N
SIR_model_A$R_per = 100*SIR_model_A$R/SIR_model_A$N
SIR_model_A$V1_per = 100*SIR_model_A$V1/SIR_model_A$N
SIR_model_A$V2_per = 100*SIR_model_A$V2/SIR_model_A$N
SIR_model_A$Itotal_per = 100*SIR_model_A$Itotal/SIR_model_A$N

plot(SIR_model_A$time,
     SIR_model_A$I_per,type = "l", col="red",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t", xlim=c(0,5475))
lines(SIR_model_A$time, SIR_model_A$N_per)
lines(SIR_model_A$time, SIR_model_A$V2_per, col="orange")
lines(SIR_model_A$time, SIR_model_A$R_per, col="blue")
lines(SIR_model_A$time, SIR_model_A$S_per,col="green")
title("B) SIR Model A", cex=0.8, adj=0)

write.csv(SIR_model_A, file = "6B_influenza_SIR_A.csv")

# calculating disease burden over year - by cases

A1 = SIR_model_A$Itotal[365]
A2 = SIR_model_A$Itotal[730]
A3 = SIR_model_A$Itotal[1095]
A4 = SIR_model_A$Itotal[1460]
A5 = SIR_model_A$Itotal[1825]
A6 = SIR_model_A$Itotal[2190]
A7 = SIR_model_A$Itotal[2555]
A8 = SIR_model_A$Itotal[2920]
A9 = SIR_model_A$Itotal[3285]
A10 = SIR_model_A$Itotal[3650]
A11 = SIR_model_A$Itotal[4015]
A12 = SIR_model_A$Itotal[4380]
A13 = SIR_model_A$Itotal[4745]
A14 = SIR_model_A$Itotal[5110]

# disease burden
A_Year1 = SIR_model_A$Itotal[1:365] 
A_Year2 = SIR_model_A$Itotal[366:730]-A1
A_Year3 = SIR_model_A$Itotal[731:1095]-A2
A_Year4 = SIR_model_A$Itotal[1096:1460]-A3
A_Year5 = SIR_model_A$Itotal[1461:1825]-A4
A_Year6 = SIR_model_A$Itotal[1826:2190]-A5
A_Year7 = SIR_model_A$Itotal[2191:2555]-A6
A_Year8 = SIR_model_A$Itotal[2556:2920]-A7
A_Year9 = SIR_model_A$Itotal[2921:3285]-A8
A_Year10 = SIR_model_A$Itotal[3286:3650]-A9
A_Year11 = SIR_model_A$Itotal[3651:4015]-A10
A_Year12 = SIR_model_A$Itotal[4016:4380]-A11
A_Year13 = SIR_model_A$Itotal[4381:4745]-A12
A_Year14 = SIR_model_A$Itotal[4746:5110]-A13
A_Year15 = SIR_model_A$Itotal[5111:5475]-A14

burden_ASIR_V_cases = as.data.frame(cbind(A_Year1,A_Year2,A_Year3,A_Year4,
                                          A_Year5,A_Year6,A_Year7,A_Year8,
                                          A_Year9,A_Year10,A_Year11,A_Year12,
                                          A_Year13,A_Year14,A_Year15))

#View(burden_ASIR_V_cases)
print(burden_ASIR_V_cases[365,])


# calculating disease burden over year - by proportion

PA1 = SIR_model_A$Itotal_per[365]
PA2 = SIR_model_A$Itotal_per[730]
PA3 = SIR_model_A$Itotal_per[1095]
PA4 = SIR_model_A$Itotal_per[1460]
PA5 = SIR_model_A$Itotal_per[1825]
PA6 = SIR_model_A$Itotal_per[2190]
PA7 = SIR_model_A$Itotal_per[2555]
PA8 = SIR_model_A$Itotal_per[2920]
PA9 = SIR_model_A$Itotal_per[3285]
PA10 = SIR_model_A$Itotal_per[3650]
PA11 = SIR_model_A$Itotal_per[4015]
PA12 = SIR_model_A$Itotal_per[4380]
PA13 = SIR_model_A$Itotal_per[4745]
PA14 = SIR_model_A$Itotal_per[5110]

# disease burden
PA_Year1 = SIR_model_A$Itotal_per[1:365] 
PA_Year2 = SIR_model_A$Itotal_per[366:730]-PA1
PA_Year3 = SIR_model_A$Itotal_per[731:1095]-PA2
PA_Year4 = SIR_model_A$Itotal_per[1096:1460]-PA3
PA_Year5 = SIR_model_A$Itotal_per[1461:1825]-PA4
PA_Year6 = SIR_model_A$Itotal_per[1826:2190]-PA5
PA_Year7 = SIR_model_A$Itotal_per[2191:2555]-PA6
PA_Year8 = SIR_model_A$Itotal_per[2556:2920]-PA7
PA_Year9 = SIR_model_A$Itotal_per[2921:3285]-PA8
PA_Year10 = SIR_model_A$Itotal_per[3286:3650]-PA9
PA_Year11 = SIR_model_A$Itotal_per[3651:4015]-PA10
PA_Year12 = SIR_model_A$Itotal_per[4016:4380]-PA11
PA_Year13 = SIR_model_A$Itotal_per[4381:4745]-PA12
PA_Year14 = SIR_model_A$Itotal_per[4746:5110]-PA13
PA_Year15 = SIR_model_A$Itotal_per[5111:5475]-PA14

burden_ASIR_V_per = as.data.frame(cbind(PA_Year1,PA_Year2,PA_Year3,PA_Year4,
                                        PA_Year5,PA_Year6,PA_Year7,PA_Year8,
                                        PA_Year9,PA_Year10,PA_Year11,PA_Year12,
                                        PA_Year13,PA_Year14,PA_Year15))

#View(burden_ASIR_V_per)
print(burden_ASIR_V_per[365,])



# Model B ####

sir_model_B <-function(time,state,parameters){
  with(as.list(c(state,parameters)),{
    N=S+I+R+V1+V2
    F_B = beta*(I/N)*((N-R-V2)/N)
    F_V = rr*F_B
    w = 1/Dur
    gamma=1/Dur2
    dS = -F_B*S + w*R + b*N +w*V2 - v*N
    dI = F_B*S + F_B*V1 + F_V*V2 - sigma*I
    dR = sigma*I - w*R
    dItotal = F_B*S + F_B*V1 + F_V*V2
    dV1 = v*N - F_B*V1 - gamma*V1
    dV2 = gamma*V1 - F_V*V2 - w*V2
    
    return(list(c(dS,dI,dR,dItotal,dV1,dV2)))
  }
  )
}

#solving the equations
SIR_model_B = as.data.frame(ode(y = Initial_values,
                                func = sir_model_B,
                                parms = parameters,
                                times = time)) 

# plot output SIR model B
SIR_model_B$N = SIR_model_B$S+
                SIR_model_B$I+
                SIR_model_B$R+
                SIR_model_B$V1+
                SIR_model_B$V2
SIR_model_B$N_per = 100*SIR_model_B$N/SIR_model_B$N
SIR_model_B$S_per = 100*SIR_model_B$S/SIR_model_B$N
SIR_model_B$I_per = 100*SIR_model_B$I/SIR_model_B$N
SIR_model_B$R_per = 100*SIR_model_B$R/SIR_model_B$N
SIR_model_B$V1_per = 100*SIR_model_B$V1/SIR_model_B$N
SIR_model_B$V2_per = 100*SIR_model_B$V2/SIR_model_B$N
SIR_model_B$Itotal_per = 100*SIR_model_B$Itotal/SIR_model_B$N

plot(SIR_model_B$time,
     SIR_model_B$I_per,type = "l", col="red",
     ylab = "Proportion, %", ylim = c(0,100),
     xlab = "Arbitrary time, t", xlim=c(0,5475))
lines(SIR_model_B$time, SIR_model_B$N_per)
lines(SIR_model_B$time, SIR_model_B$V2_per, col="orange")
lines(SIR_model_B$time, SIR_model_B$R_per, col="blue")
lines(SIR_model_B$time, SIR_model_B$S_per,col="green")
title("C) SIR Model B", cex=0.8, adj=0)

write.csv(SIR_model_B, file = "6C_influenza_SIR_B.csv")

# calculating disease burden over year - by cases

B1 = SIR_model_B$Itotal[365]
B2 = SIR_model_B$Itotal[730]
B3 = SIR_model_B$Itotal[1095]
B4 = SIR_model_B$Itotal[1460]
B5 = SIR_model_B$Itotal[1825]
B6 = SIR_model_B$Itotal[2190]
B7 = SIR_model_B$Itotal[2555]
B8 = SIR_model_B$Itotal[2920]
B9 = SIR_model_B$Itotal[3285]
B10 = SIR_model_B$Itotal[3650]
B11 = SIR_model_B$Itotal[4015]
B12 = SIR_model_B$Itotal[4380]
B13 = SIR_model_B$Itotal[4745]
B14 = SIR_model_B$Itotal[5110]

# disease burden
B_Year1 = SIR_model_B$Itotal[1:365] 
B_Year2 = SIR_model_B$Itotal[366:730]-B1
B_Year3 = SIR_model_B$Itotal[731:1095]-B2
B_Year4 = SIR_model_B$Itotal[1096:1460]-B3
B_Year5 = SIR_model_B$Itotal[1461:1825]-B4
B_Year6 = SIR_model_B$Itotal[1826:2190]-B5
B_Year7 = SIR_model_B$Itotal[2191:2555]-B6
B_Year8 = SIR_model_B$Itotal[2556:2920]-B7
B_Year9 = SIR_model_B$Itotal[2921:3285]-B8
B_Year10 = SIR_model_B$Itotal[3286:3650]-B9
B_Year11 = SIR_model_B$Itotal[3651:4015]-B10
B_Year12 = SIR_model_B$Itotal[4016:4380]-B11
B_Year13 = SIR_model_B$Itotal[4381:4745]-B12
B_Year14 = SIR_model_B$Itotal[4746:5110]-B13
B_Year15 = SIR_model_B$Itotal[5111:5475]-B14

burden_BSIR_V_cases = as.data.frame(cbind(B_Year1,B_Year2,B_Year3,B_Year4,
                                          B_Year5,B_Year6,B_Year7,B_Year8,
                                          B_Year9,B_Year10,B_Year11,B_Year12,
                                          B_Year13,B_Year14,B_Year15))

#View(burden_BSIR_V_cases)
print(burden_BSIR_V_cases[365,])


# calculating disease burden over year - by proportion

PB1 = SIR_model_B$Itotal_per[365]
PB2 = SIR_model_B$Itotal_per[730]
PB3 = SIR_model_B$Itotal_per[1095]
PB4 = SIR_model_B$Itotal_per[1460]
PB5 = SIR_model_B$Itotal_per[1825]
PB6 = SIR_model_B$Itotal_per[2190]
PB7 = SIR_model_B$Itotal_per[2555]
PB8 = SIR_model_B$Itotal_per[2920]
PB9 = SIR_model_B$Itotal_per[3285]
PB10 = SIR_model_B$Itotal_per[3650]
PB11 = SIR_model_B$Itotal_per[4015]
PB12 = SIR_model_B$Itotal_per[4380]
PB13 = SIR_model_B$Itotal_per[4745]
PB14 = SIR_model_B$Itotal_per[5110]

# disease burden
PB_Year1 = SIR_model_B$Itotal_per[1:365] 
PB_Year2 = SIR_model_B$Itotal_per[366:730]-PB1
PB_Year3 = SIR_model_B$Itotal_per[731:1095]-PB2
PB_Year4 = SIR_model_B$Itotal_per[1096:1460]-PB3
PB_Year5 = SIR_model_B$Itotal_per[1461:1825]-PB4
PB_Year6 = SIR_model_B$Itotal_per[1826:2190]-PB5
PB_Year7 = SIR_model_B$Itotal_per[2191:2555]-PB6
PB_Year8 = SIR_model_B$Itotal_per[2556:2920]-PB7
PB_Year9 = SIR_model_B$Itotal_per[2921:3285]-PB8
PB_Year10 = SIR_model_B$Itotal_per[3286:3650]-PB9
PB_Year11 = SIR_model_B$Itotal_per[3651:4015]-PB10
PB_Year12 = SIR_model_B$Itotal_per[4016:4380]-PB11
PB_Year13 = SIR_model_B$Itotal_per[4381:4745]-PB12
PB_Year14 = SIR_model_B$Itotal_per[4746:5110]-PB13
PB_Year15 = SIR_model_B$Itotal_per[5111:5475]-PB14

burden_BSIR_V_per = as.data.frame(cbind(PB_Year1,PB_Year2,PB_Year3,PB_Year4,
                                        PB_Year5,PB_Year6,PB_Year7,PB_Year8,
                                        PB_Year9,PB_Year10,PB_Year11,PB_Year12,
                                        PB_Year13,PB_Year14,PB_Year15))

#View(burden_BSIR_V_per)
print(burden_BSIR_V_per[365,])


# Plot Influenza disease burden
# US seasonal inlfuenza disease burden can be obtained from: 
# Source:  https://www.cdc.gov/flu/about/burden/index.html

# CDC estimates disease burden of influenza

Year = c(2010,2011,2012,2013,2014,2015,2016,2017,2018,2019)
US_Population = c(309300000,311600000,313900000,316100000,318400000,
                  320700000,323100000,325100000,327200000,328200000) 
CDC_cases = c(21000000,9300000,34000000,30000000,30000000,
              24000000,29000000,45000000,36000000,38000000)
`95%LL_cases` = c(20000000,8700000,32000000,28000000,29000000,
                  20000000,25000000,39000000,31000000,34000000) 
`95%UL_cases` = c(25000000,12000000,38000000,33000000,33000000,
                  33000000,45000000,58000000,45000000,47000000)

# Estimate by conventional SIR model
Classical_SIR_cases = as.data.frame(t(print(burden_classicalSIR_V_cases[365,c(6:15)])))
Classical_SIR_proportion = as.data.frame(t(print(burden_classicalSIR_V_per[365,c(6:15)])))


# Estimate by Model A
Model_A_cases = as.data.frame(t(print(burden_ASIR_V_cases[365,c(6:15)])))
Model_A_proportion = as.data.frame(t(print(burden_ASIR_V_per[365,c(6:15)])))


# Estimate by Model B
Model_B_cases = as.data.frame(t(print(burden_BSIR_V_cases[365,c(6:15)])))
Model_B_proportion = as.data.frame(t(print(burden_BSIR_V_per[365,c(6:15)])))



Influenza = as.data.frame(cbind(Year,US_Population,CDC_cases,
                                `95%LL_cases`,`95%UL_cases`,
                                Classical_SIR_cases$`365`,Classical_SIR_proportion$`365`,
                                Model_A_cases$`365`,Model_A_proportion$`365`,
                                Model_B_cases$`365`,Model_B_proportion$`365`))

Influenza$CDC_proprotion = 100*Influenza$CDC_cases/Influenza$US_Population
Influenza$`95%LL_proportion` = 100*Influenza$`95%LL_cases`/Influenza$US_Population
Influenza$`95%UL_proportion` = 100*Influenza$`95%UL_cases`/Influenza$US_Population
head(Influenza)

# rename variables
names(Influenza)[names(Influenza) == "V6"] <- "Classical_SIR_cases"
names(Influenza)[names(Influenza) == "V7"] <- "Classical_SIR_proportion"
names(Influenza)[names(Influenza) == "V8"] <- "Model_A_cases"
names(Influenza)[names(Influenza) == "V9"] <- "Model_A_proportion"
names(Influenza)[names(Influenza) == "V10"] <- "Model_B_cases"
names(Influenza)[names(Influenza) == "V11"] <- "Model_B_proportion"

View(Influenza)
write.csv(Influenza, file = "6D_Influenza_DiseaseBurden_Projection.csv")

# Plot graph: Compare Conventional SIR, Model A, Model B and CDC estimate

par(mar=c(5.9, 4.9, 4.9, 8.9), xpd=TRUE)
plot(Influenza$Year,Influenza$CDC_proprotion, type="b",pch=15,
     ylab = "Proportion of population, %", ylim = c(0,60),
     xlab = "Year",xlim = c(2010,2019))
lines(Influenza$Year, Influenza$`95%LL_proportion`, type = "b", pch=18)
lines(Influenza$Year, Influenza$`95%UL_proportion`, type = "b", pch=17)
lines(Influenza$Year, Influenza$Classical_SIR_proportion, type = "b", col="red", pch=16)
lines(Influenza$Year, Influenza$Model_A_proportion, type = "b", col="green", pch=16)
lines(Influenza$Year, Influenza$Model_B_proportion, type = "b", col="blue", pch=16)
title("D) US Influenza Disease Burden and Projections (2010-2019)",cex=0.5, adj=0)

legend("topright",inset=c(-0.4,0),cex=0.8, 
       legend = c("Conventional SIR","95% UL","CDC estimate","95% LL", "Model A","Model B"),
       col = c("red","black","black","black","green","blue"),
       pch = c(16,17,15,18,16,16))

#************************ THE END*******************************

# references
citation()
citation("deSolve")













